<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>ok</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    void bar(int b) {
        for (int i = 0; i < 10; i++) {
            throw new Exception();
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>DD anomaly</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'i' is never used (overwritten on line 4)</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    void bar() {
        int i=0;
        i=1;
        if (i==2) {}
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>DU anomaly</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    void bar() {
        int i=0;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>UR anomaly</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    void bar() {
        int i;
        if (i == 0) {}
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Conditional flow 0</description>
        <expected-problems>3</expected-problems>
        <expected-linenumbers>3,4,6</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'j' is never used (overwritten on line 6)</message>
            <message>The value assigned to variable 'z' is never used (goes out of scope)</message>
            <message>The value assigned to variable 'j' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    void bar(int i) {
        int j = 0;
        int z = 0;
        if (i < 10) {
            j = i;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Conditional flow 1</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'z' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    void bar(int i) {
        int j = 0;
        int z = 0; // unused
        if (i < 10) {
            j = i;
        }
        System.out.println(j);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Conditional flow 2</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'j' is never used (overwritten on lines 6 and 8)</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    void bar(int i) {
        int j = 0; // unused
        int z = 0;
        if (i < 10) {
            j = i;
        } else {
            j = z;
        }
        System.out.println(j);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Conditional flow with abrupt throw</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,6</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'j' is never used (overwritten on lines 6 and 9)</message>
            <message>The value assigned to variable 'j' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    void bar(int i) {
        int j = 0; // unused
        int z = 0;
        if (i < 10) {
            j = i; // unused
            throw new Exception();
        } else {
            j = z;
        }
        System.out.println(j);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Conditional flow with abrupt return</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,6</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'j' is never used (overwritten on lines 6 and 9)</message>
            <message>The value assigned to variable 'j' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {
    void bar(int i) {
        int j = 0;  // unused
        int z = 0;
        if (i < 10) {
            j = i;  // unused
            return;
        } else {
            j = z;
        }
        System.out.println(j);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Local variable in loop</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>10,19</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'fail' is never used (overwritten on line 19)</message>
            <message>The value assigned to variable 'fail' is never used (overwritten on line 19)</message>
        </expected-messages>
        <code><![CDATA[
public class LoopTest {
    public static void main(String[] args) {
        int[] a = {1,2,3};
        int[] b = {4,5,6};
        int[] c = {7,8,9};
        for (int i : a) {
            if (i == 0) {
                break;
            } else {
                boolean fail = false;
                for (int j : b) {
                    boolean match = false;
                    for (int k : c) {
                        if (k == 42) {
                            match = true;
                        }
                    }
                    if (!match) {
                        fail = true;
                    }
                }
            }
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#408 Assert statements causing </description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class AssertTest {
    public void test() {
        final String s = "";
        assert(s != null);

        System.out.println(s);

        final Double d = 9;
        assert(d != null);

        System.out.println(d);

        final String k = "k";
        assert(k != null);

        System.out.println(k);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 1. DU-Anomaly(b)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'b' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        int b = 0 ;
        a = a + b ;
        b = a + b ;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>For loop</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        for(int i = 0 ; i <= 10; i ++){
            a = a+3;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>For loop 2</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,5</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (overwritten on line 5)</message>
            <!-- Overwrites itself -->
            <message>The value assigned to variable 'a' is never used (overwritten on line 5)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        for(int i = 0 ; i <= 10; i ++){
            a = i * 3;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>For loop 3</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        for(int i = 0 ; i <= 10; i ++){
            a = i * 3;
        }
        System.out.println(a);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>For loop 4</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        for(int i = 0 ; (i + a) <= 10; i ++){
            a = i * 3;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Foreach</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>5</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (overwritten on line 4)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int[] b = new int[10];
        for(int a : b){
            a = a+3;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>While loop 1</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0;
        while (i < 30) {
            a = a + 3;
            i += 3;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>While loop 2</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>4,7</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'i' is never used (overwritten on line 7)</message>
            <message>The value assigned to variable 'i' is never used (overwritten on line 7)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0; // unused
        while (a < 30) {
            a = a + 3;
            i = 5; // unused (kills itself)
        }
    }
}
        ]]></code>
    </test-code>
    <test-code>
        <description>While loop with break</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'i' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0;
        while (true) {
            if (a >= 30) {
                i = a + 1; // unused
                break;
            }
            a = a + 3;
            i = i + 1; // used by itself
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>While loop without break (control case)</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0; // used by compound below
        int i = 0;
        while (true) {
            if (a >= 30) {
                i += a + 1; // unused by below
                // break;  // no break here
            }
            a = a + 3;
            i = a + 2; // used by above
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>While loop without break 2 (control case)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>12</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'i' is never used (overwritten on line 16)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0; // unused now

        outer:
        while (true) {
            a += 2;

            while (true) {
                if (a >= 30) {
                    i += a + 1; // unused because of i = a + 2
                    // break outer;
                }
                a = a + 3;
                i = a + 2;  // killed by below
            }

            i = 2; // used by print
        }

        System.out.println(i); // uses i = i + 1
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>While loop without break 2 (control case)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>12</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'i' is never used (overwritten on line 19)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0; // unused now

        outer:
        while (true) {
            a += 2;

            while (true) {
                if (a >= 30) {
                    i += a + 1; // unused because of i = 2
                    break;
                }
                a = a + 3;
                i = a + 2;  // used by i += a + 1
            }

            i = 2; // used by print
        }

        System.out.println(i); // uses i = i + 1
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>While loop with named break 2</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0; // unused now

        outer:
        while (true) {
            a += 2;

            while (true) {
                if (a >= 30) {
                    i += a + 1; // used by print
                    break outer;
                }
                a = a + 3;
                i = a + 2;  // used by i += a + 1
            }

            i = 2; // used by print
        }

        System.out.println(i); // uses i = i + 1
    }
}
        ]]></code>
    </test-code>


    <test-code>
        <description>While loop with continue</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0;
        while (true) {
            if (a >= 30) {
                i = a + 1; // used by below
                continue;
            }
            a = a + 3;
            i = i + 1; // used by itself
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>While loop with continue 2</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0;
        while (a < 50) {
            if (i >= 30) {
                a = i + 1; // used by loop condition
                continue;
            }
            i++; // used by itself
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>While loop with break (control for continue test above)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0;
        while (a < 50) {
            if (i >= 30) {
                a = i + 1; // unused
                break;
            }
            i++; // used by itself
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Do while 0</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        int i = 0 ;
        do {
            a = a+3;
            i += 3;
        } while (i < 30);
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Do while 1</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (overwritten on line 6)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0;
        do {
            a = i+3;
            i += 3;
        } while ((a+i) < 30);
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Do while with break</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>7,8</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'i' is never used (goes out of scope)</message>
            <message>The value assigned to variable 'a' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0;
        do {
            if (a >= 20) {
                i = 4;
                a *= 5;
                break;
            }

            a = i + 3;
            i += 3;
        } while (i < 30);
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Do while with continue</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0;
        int i = 0;
        do {
            if (a >= 20) {
                i = 4;  // used by condition
                a *= 5;
                continue;
            }

            a = i + 3;
            i += 3;
        } while (i < 30);
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Switch statement 0</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>6,8,10,12</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (goes out of scope)</message>
            <message>The value assigned to variable 'a' is never used (goes out of scope)</message>
            <message>The value assigned to variable 'a' is never used (goes out of scope)</message>
            <message>The value assigned to variable 'a' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        int i = 0 ;
        switch(i){
            case 1 : a = a+1;
            break;
            case 2 : a = a+2;
            break;
            case 3 : a = a+3;
            break;
            default : a = a + 1;
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Switch statement 1</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        int i = 0 ;
        switch(i){
            case 1 : a = 1;
            break;
            case 2 : a = 2;
            break;
            case 3 : a = 3;
            break;
            default : a = a + 1;
        }

        System.out.println(a);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Switch statement 2</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        int i = 0 ;
        switch(i){
            case 1 : a = 1;
                     if (args.length > 0) break; // else fallthrough
            case 2 : a = 2; break;
            case 3 : a = 3; break;
            default : a = a + 1;
        }

        System.out.println(a);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Switch fallthrough</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (overwritten on line 8)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        int i = 0 ;
        switch(i){
            case 1 : a = 1; // unused
            // break; // no break
            case 2 : a = 2;
            break;
            case 3 : a = 3;
            break;
            default : a = a + 1;
        }

        System.out.println(a);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Switch fallthrough 2</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>9</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        int i = 0 ;
        switch(i){
            case 1 : a = a+1;
            case 2 : a = a+2;
            case 3 : a = a+3;
            default : a = a + 0; // this one
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Switch non-fallthrough</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        int i = 0 ;
        switch(i) {
            case 1 -> a = 1;
            case 2 -> a = 2;
            case 3 -> a = 3;
            default -> a = a + 1;
        }
        System.out.println(a);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Switch non-fallthrough blocks</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>9</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'i' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        int i = 0 ;
        switch(i) {
            case 1 -> a = 1;
            case 2 -> {
                if (args.length > 0) {
                    i = 4;
                    break;
                }
                a = 2;
            }
            case 3 -> a = 3;
            default -> a = a + 1;
        }
        System.out.println(a);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Switch expr non-fallthrough</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>6,7,8,9</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (overwritten on line 4)</message>
            <message>The value assigned to variable 'a' is never used (overwritten on line 4)</message>
            <message>The value assigned to variable 'a' is never used (overwritten on line 4)</message>
            <message>The value assigned to variable 'a' is never used (overwritten on line 4)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        a = switch(i) { // this is used
            // all those are unused
            case 1 -> a = 1;
            case 2 -> a = 2;
            case 3 -> a = 3;
            default -> a = a + 1;
        };

        System.out.println(a);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Switch expr with yield</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>6,9,13,14</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (overwritten on line 4)</message>
            <message>The value assigned to variable 'a' is never used (overwritten on line 4)</message>
            <message>The value assigned to variable 'a' is never used (overwritten on line 4)</message>
            <message>The value assigned to variable 'a' is never used (overwritten on line 4)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int a = 0 ;
        a = switch(i) { // this is used
            // all those are unused
            case 1 -> a = 1;
            case 2 -> {
                if (a > 0) {
                    yield a++;
                }
                yield 4;
            }
            case 3 -> a = 3;
            default -> a = a + 1;
        };

        System.out.println(a);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Usage as LHS of method</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>5</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 't1' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int t1 = 0 ;
        Test2 test = new Test2() ;
        t1 = test.simpleTest(t1) ;
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Assignment in operand</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 't1' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int t1 = 0 ;
        int t2 = 0 ;
        Test2 test = new Test2();
        if((t1 = test.simpleTest(t1)) == t2);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Assignment in operand 2</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>7</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 't1' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int t1 = 0 ;
        int t2 = 0 ;
        // the left assignment reaches the right of the ==
        if (   (t1 = t1 + t2)
            == (t1 = t2 * t1) ); // only this assignment is unused
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Assignment in operand 3</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int t1 = 0 ;

        Test2 test = new Test2();
        if( (t1 = test.simpleTest(t1)) == t1);
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Assignment in operand 4</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>4,6</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 't2' is never used (goes out of scope)</message>
            <message>The value assigned to variable 't1' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Test{
    public static void main(String[] args){
        int t1 = 0;
        int t2 = 0;
        Test2 test = new Test2() ;
        if( t1 == (t1 = test.simpleTest(t1))) ;
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1749 DD False Positive in DataflowAnomalyAnalysis</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
public class Test {
    public void test(){
        int a = 0;
        a = a + 3;
    }
}
        ]]></code>
    </test-code>
    <test-code>
        <description>Compound assignment</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
public class Test {
    public void test(){
        int a = 0;
        a += 3; // same with compound
    }
}
        ]]></code>
    </test-code>
    <test-code>
        <description>Another case</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,5</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'iter' is never used (overwritten on line 4)</message>
            <message>The value assigned to variable 'iter' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
public class Test {
    public void test(){
       ScopeData iter = acceptOpt(node.getBody(), before.fork()); // this assignment is unused
       iter = acceptOpt(node.getCondition(), before.fork());
       iter = acceptOpt(node.getBody(), iter);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Var usage in lambda (#1304)</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {

    public boolean dummyMethod(final String captured, final Set<String> dummySet) {
        captured = captured.trim();
        return dummySet.stream().noneMatch(value -> value.equalsIgnoreCase(captured));
    }

}        ]]></code>
    </test-code>

    <test-code>
        <description>Try/catch</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (overwritten on lines 6 and 8)</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {

    public int foo() {
        int a = 0;
        try (Reader r = new StringReader("")) {
            a = r.read();
        } catch (IOException e) {
            a = -1;
        }
        return a;
    }

}        ]]></code>
    </test-code>

    <test-code>
        <description>Try with several catches</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {

    public int foo() {
        int a;
        try (Reader r = new StringReader("")) {
            a = r.read();
        } catch (IOException e) {
            a = -1;
        } catch (IllegalArgumentException e) {
            a = 2;
        }
        return a;
    }

}        ]]></code>
    </test-code>

    <test-code>
        <description>Try with resources: resources should be used</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {

    public void foo() {
        try (Reader r = new StringReader("")) {

        }
    }

}        ]]></code>
    </test-code>

    <test-code>
        <description>Definitions in try block reach catch blocks</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {

    void method() {
        boolean halfway = false;

        try {
            halfway = true;
        } catch(Exception e) {
            System.out.println(halfway);
        }
    }
}


]]></code>
    </test-code>

    <test-code>
        <description>Try/catch finally</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {

    public int foo() {
        int a = 0;
        try (Reader r = new StringReader("")) {
            a = r.read();  // used in finally
        } catch (IOException e) {
            a = -1; // used in finally
        } finally {
            print(a);
        }
        return 0;
    }

}        ]]></code>
    </test-code>
    <test-code>
        <description>Try/catch finally 3</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'a' is never used (overwritten on lines 6 and 8)</message>
        </expected-messages>
        <code><![CDATA[
public class Foo {

    public int foo() {
        int a = 0;
        try (Reader r = new StringReader("")) {
            a = r.read();  // used in finally
        } catch (IOException e) {
            a = -1; // used in finally
        } finally {
            // don't use a
        }
        return a;
    }

}        ]]></code>
    </test-code>
    <test-code>
        <description>Try/catch finally in loop</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;

class Foo {

    public int foo() {
        int a = 0;
        while (a > 10) {
            try (Reader r = new StringReader("")) {
                r.read();
            } catch (IOException e) {
                a = -1; // used in finally even if break
                break;
            } finally {
                a++;
            }
        }
        return a;
    }

}
        ]]></code>
    </test-code>
    <test-code>
        <description>Abstract method NPE</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[

abstract class Foo {

    public abstract int foo();

    interface Bar {
        int bar();
    }

}
        ]]></code>
    </test-code>
    <test-code>
        <description>FP in finally</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[

class Foo {
    public Object intercept(Object proxy) throws Throwable {
        Object oldProxy = null; // FP here
        try {
            oldProxy = new Object[] { proxy };
            return null;
        }
        finally {
            System.out.println(oldProxy);
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Lambda captured var use</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Foo {

  public Flux<Object> decode() {
    Flux<List<XMLEvent>> splitEvents = splitEvts();

    return map(events -> {
      return unmarshal(events.append(splitEvents));
    });
  }

}
        ]]></code>
    </test-code>
    <test-code>
        <description>Lambda assignment</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>5,6</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'k' is never used (overwritten on line 6)</message>
            <message>The value assigned to variable 'k' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Foo {

  public void decode() {
    doSomething(events -> {
      int k = 0;
      return k = 2;
    });
  }

}
        ]]></code>
    </test-code>
    <test-code>
        <description>Lambda returns 2</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>4,7</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'splitEvents' is never used (goes out of scope)</message>
            <message>The value assigned to variable 'events' is never used (goes out of scope)</message>
        </expected-messages>
        <code><![CDATA[
class Foo {

  public Flux<Object> decode() {
    Flux<List<XMLEvent>> splitEvents = splitEvts();

    return map(events -> {
      events = events.normalize();
      return dontUseEvents();
    });
  }

}
        ]]></code>
    </test-code>
    <test-code>
        <description>FP in try</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package foo;
class Foo {

    public Object getSubject() {
      try {
        Object subject = Other.currentUserMethod.invoke();
        if (subject == null) {
          subject = Other.anonymousSubjectMethod.invoke(0);
        }
        return subject;
      } catch (Exception ex) {
        throw new RuntimeException("Failed to obtain SubjectHandle", ex);
      }
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field initializers 0</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Foo {

    int f1 = 0;
    int f2 = f1++;

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field initializers 1</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'f1' is never used (overwritten on line 4)</message>
        </expected-messages>
        <code><![CDATA[
class Foo {

    int f1 = 0;
    int f2 = f1 = 1, f3 = f2;

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field initializers 1</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'f1' is never used (overwritten on line 4)</message>
        </expected-messages>
        <code><![CDATA[
class Foo {

    int f1 = 0;
    int f2 = this.f1 = 1, f3 = f2;

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field initializers and ctor</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'f1' is never used (overwritten on lines 7 and 11)</message>
        </expected-messages>
        <code><![CDATA[
class Foo {

    int f1 = 0;
    int f2 = 0;

    Foo(int f) {
        f1 = f;
    }

    Foo(int f, int g) {
        f1 = f;
        f2 = f + g;
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field initializers and ctor with this</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'f1' is never used (overwritten on lines 7 and 11)</message>
        </expected-messages>
        <code><![CDATA[
class Foo {

    int f1 = 0;
    int f2 = 0;

    Foo(int f) {
        this.f1 = f;
    }

    Foo(int f, int g) {
        this.f1 = f;
        this.f2 = f + g;
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field initializers and ctor with this, shadowing</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>3</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'f1' is never used (overwritten on lines 7 and 11)</message>
        </expected-messages>
        <code><![CDATA[
class Foo {

    int f1 = 0;
    int f2 = 0;

    Foo(int f1) {
        this.f1 = f1;
    }

    Foo(int f1, int g) {
        this.f1 = f1;
        this.f2 = f1 + g;
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field initializers and ctor with this, field access</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Foo {

    Bar f1 = 0;
    Bar f2 = 0;

    Foo(Bar f1) {
        this.f1.field = f1;
    }

    Foo(Bar f1, Bar g) {
        this.f1 = f1;
        this.f2 = f1 + g;
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Field initializers and ctor</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,11</expected-linenumbers>
        <expected-messages>
            <message>The value assigned to variable 'f1' is never used (overwritten on line 11)</message>
            <message>The value assigned to variable 'f1' is never used (overwritten on lines 7 and 15)</message>
        </expected-messages>
        <code><![CDATA[
class Foo {

    int f1 = 0;
    int f3 = 0;

    Foo(int f) {
        f1 = f;
    }

    {
        f1 = 1;
    }

    Foo(int f, int g) {
        f1 = f;
        f2 = f + g;
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>Static initializer</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Foo {
	private static Class<? extends Annotation> ejbRefClass;

	private static Class<? extends Annotation> webServiceRefClass;

	static {
		try {
			Class<? extends Annotation> clazz = (Class<? extends Annotation>)					Class.forName("javax.xml.ws.WebServiceRef");
			webServiceRefClass = clazz;
		} catch (ClassNotFoundException ex) {
			webServiceRefClass = null;
		}

		try {
			Class<? extends Annotation> clazz = Class.forName("javax.ejb.EJB");
			ejbRefClass = clazz;
		} catch (ClassNotFoundException ex) {
			ejbRefClass = null;
		}
	}


	private static Class<? extends Annotation> other = webServiceRefClass;

}
        ]]></code>
    </test-code>


    <test-code>
        <description>FP with anonymous classes on the way</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Foo {
    private static final Method privateLookupInMethod;

    private static final Method lookupDefineClassMethod;

    private static final Method classLoaderDefineClassMethod;

    private static final ProtectionDomain PROTECTION_DOMAIN;

    private static final Throwable THROWABLE;

    private static final List<Method> OBJECT_METHODS = new ArrayList<Method>();

    static {
        Method privateLookupIn;
        Method lookupDefineClass;
        Method classLoaderDefineClass;
        ProtectionDomain protectionDomain;
        Throwable throwable = null;
        try {
            privateLookupIn = (Method) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws Exception {
                    try {
                        return MethodHandles.class.getMethod("privateLookupIn", Class.class, MethodHandles.Lookup.class);
                    }
                    catch (NoSuchMethodException ex) {
                        return null;
                    }
                }
            });
            lookupDefineClass = (Method) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws Exception {
                    try {
                        return MethodHandles.Lookup.class.getMethod("defineClass", byte[].class);
                    }
                    catch (NoSuchMethodException ex) {
                        return null;
                    }
                }
            });
            classLoaderDefineClass = (Method) AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws Exception {
                    return ClassLoader.class.getDeclaredMethod("defineClass",
                                                               String.class, byte[].class, Integer.TYPE, Integer.TYPE, ProtectionDomain.class);
                }
            });
            protectionDomain = getProtectionDomain(ReflectUtils.class);
            AccessController.doPrivileged(new PrivilegedExceptionAction() {
                public Object run() throws Exception {
                    Method[] methods = Object.class.getDeclaredMethods();
                    for (Method method : methods) {
                        if ("finalize".equals(method.getName())
                            || (method.getModifiers() & (Modifier.FINAL | Modifier.STATIC)) > 0) {
                            continue;
                        }
                        OBJECT_METHODS.add(method);
                    }
                    return null;
                }
            });
        }
        catch (Throwable t) {
            privateLookupIn = null;
            lookupDefineClass = null;
            classLoaderDefineClass = null;
            protectionDomain = null;
            throwable = t;
        }
        privateLookupInMethod = privateLookupIn;
        lookupDefineClassMethod = lookupDefineClass;
        classLoaderDefineClassMethod = classLoaderDefineClass;
        PROTECTION_DOMAIN = protectionDomain;
        THROWABLE = throwable;
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>FP with array access</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.Map;

class Foo {
    void foo(Map<String, String> map, String name, int[] arr) {
        Integer index = map.get(name);
        arr[index] = 4;
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>FP with array access</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[

class Foo {
    int foo(int index, int[] arr) {
        arr = new int[4];
        index = arr[index];
        return index;
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>FP with long field access</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[

class Foo {
    int foo(int index, int[] arr) {
        index.method().field = 4; // not an assignment to index
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>FP with long access 2</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[

class Foo {
    int foo(int index, String[] arr) {
        arr = new String[] { "1" };
        arr[0].trim(); // this is a usage of arr
    }

}
        ]]></code>
    </test-code>
    <test-code>
        <description>FP with long access 2</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[

class Foo {
    int foo(int index, String[] arr) {
        arr = new String[] { "1" };
        arr.clone().clone(); // this is a usage of arr
    }

}
        ]]></code>
    </test-code>

    <test-code>
        <description>FN with casts</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[

class Foo {

	public void test() {
		// Two calls
		OptionalCollectionResourceInjectionBean bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean");
		bean = (OptionalCollectionResourceInjectionBean) bf.getBean("annotatedBean");
		assertSame(tb, bean.getTestBean());
		assertSame(tb, bean.getTestBean2());
	}
}
        ]]></code>
    </test-code>

</test-data>
