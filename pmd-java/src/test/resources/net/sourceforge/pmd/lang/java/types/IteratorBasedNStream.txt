+- CompilationUnit[@TypeMirror = "void"]
   +- PackageDeclaration[]
   |  +- ModifierList[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ImportDeclaration[]
   +- ClassOrInterfaceDeclaration[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T extends net.sourceforge.pmd.lang.ast.Node>"]
      +- ModifierList[]
      +- TypeParameters[]
      |  +- TypeParameter[@TypeMirror = "T"]
      |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
      +- ImplementsList[]
      |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
      |     +- TypeArguments[]
      |        +- ClassOrInterfaceType[@TypeMirror = "T"]
      +- ClassOrInterfaceBody[]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "java.util.Spliterator<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "java.util.Spliterator<T>"]
         |           +- TypeExpression[@TypeMirror = "java.util.Spliterators"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "java.util.Spliterators"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |              |  +- ArgumentList[]
         |              +- FieldAccess[@TypeMirror = "int"]
         |                 +- TypeExpression[@TypeMirror = "java.util.Spliterator"]
         |                    +- ClassOrInterfaceType[@TypeMirror = "java.util.Spliterator"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "java.util.stream.Stream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "java.util.stream.Stream<T>"]
         |           +- TypeExpression[@TypeMirror = "java.util.stream.StreamSupport"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "java.util.stream.StreamSupport"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.Spliterator<T>"]
         |              |  +- ArgumentList[]
         |              +- BooleanLiteral[@TypeMirror = "boolean"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "R"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<R>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream<? extends R>>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream<? extends R>>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |     |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     |     +- WildcardType[@TypeMirror = "? extends net.sourceforge.pmd.lang.ast.NodeStream<? extends R>"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends R>"]
         |  |     |           +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     |           |  +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     |           +- TypeArguments[]
         |  |     |              +- WildcardType[@TypeMirror = "? extends R"]
         |  |     |                 +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream<? extends R>>"]
         |  +- Block[]
         |     +- LocalVariableDeclaration[]
         |     |  +- ModifierList[]
         |     |  +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<? super T, java.util.Iterator<? extends R>>"]
         |     |  |  +- TypeArguments[]
         |     |  |     +- WildcardType[@TypeMirror = "? super T"]
         |     |  |     |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |     |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<? extends R>"]
         |     |  |        +- TypeArguments[]
         |     |  |           +- WildcardType[@TypeMirror = "? extends R"]
         |     |  |              +- ClassOrInterfaceType[@TypeMirror = "R"]
         |     |  +- VariableDeclarator[@TypeMirror = "void"]
         |     |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<? super T, java.util.Iterator<? extends R>>"]
         |     |     +- MethodCall[@TypeMirror = "java.util.function.Function<capture#724 of ? super T, java.util.Iterator<? extends R>>"]
         |     |        +- VariableAccess[@TypeMirror = "java.util.function.Function<capture#724 of ? super T, capture#888 of ? extends net.sourceforge.pmd.lang.ast.NodeStream<? extends R>>"]
         |     |        +- ArgumentList[]
         |     |           +- MethodReference[@TypeMirror = "java.util.function.Function<capture#888 of ? extends net.sourceforge.pmd.lang.ast.NodeStream<? extends R>, java.util.Iterator<? extends R>>"]
         |     |              +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream"]
         |     |                 +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream"]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<R>"]
         |           +- ArgumentList[]
         |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<R>>"]
         |                 +- LambdaParameterList[]
         |                 |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                 |     +- ModifierList[]
         |                 |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- MethodCall[@TypeMirror = "java.util.Iterator<R>"]
         |                    +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    +- ArgumentList[]
         |                       +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |                       +- VariableAccess[@TypeMirror = "java.util.function.Function<capture#169 of ? super T, java.util.Iterator<? extends R>>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "R"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<? extends R>"]
         |  |  +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.NonNull"]
         |  |  |  +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.NonNull"]
         |  |  +- TypeArguments[]
         |  |     +- WildcardType[@TypeMirror = "? extends R"]
         |  |        +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends R>"]
         |  |     +- ModifierList[]
         |  |     |  +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     |     +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends R>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? extends R"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends R>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- ConditionalExpression[@TypeMirror = "java.util.Iterator<? extends R>"]
         |           +- InfixExpression[@TypeMirror = "boolean"]
         |           |  +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<capture#422 of ? extends R>"]
         |           |  +- NullLiteral[@TypeMirror = "null"]
         |           +- MethodCall[@TypeMirror = "java.util.Iterator<R>"]
         |           |  +- TypeExpression[@TypeMirror = "java.util.Collections"]
         |           |  |  +- ClassOrInterfaceType[@TypeMirror = "java.util.Collections"]
         |           |  +- ArgumentList[]
         |           +- MethodCall[@TypeMirror = "java.util.Iterator<capture#332 of ? extends R>"]
         |              +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<capture#332 of ? extends R>"]
         |              +- ArgumentList[]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "R"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<R>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |        +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.NonNull"]
         |  |           +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.NonNull"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Function<? super T, ? extends R>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<? super T, ? extends R>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |     |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     |     +- WildcardType[@TypeMirror = "? extends R"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |     |           +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     |              +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<? super T, ? extends R>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<R>"]
         |           +- ArgumentList[]
         |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<R>>"]
         |                 +- LambdaParameterList[]
         |                 |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                 |     +- ModifierList[]
         |                 |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- MethodCall[@TypeMirror = "java.util.Iterator<R>"]
         |                    +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    +- ArgumentList[]
         |                       +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |                       +- VariableAccess[@TypeMirror = "java.util.function.Function<capture#615 of ? super T, capture#898 of ? extends R>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     |           +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.NonNull"]
         |  |     |              +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.NonNull"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           +- ArgumentList[]
         |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<T>>"]
         |                 +- LambdaParameterList[]
         |                 |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                 |     +- ModifierList[]
         |                 |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                    +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    +- ArgumentList[]
         |                       +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |                       +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.Filtermap<T, T>"]
         |                          +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.Filtermap"]
         |                          |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.Filtermap"]
         |                          +- ArgumentList[]
         |                             +- VariableAccess[@TypeMirror = "java.util.function.Predicate<capture#280 of ? super T>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "R"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<R>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.lang.Class<? extends R>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Class<? extends R>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? extends R"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.lang.Class<? extends R>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<R>"]
         |           +- ArgumentList[]
         |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<R>>"]
         |                 +- LambdaParameterList[]
         |                 |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                 |     +- ModifierList[]
         |                 |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- MethodCall[@TypeMirror = "java.util.Iterator<R>"]
         |                    +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    +- ArgumentList[]
         |                       +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |                       +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.Filtermap<T, R>"]
         |                          +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.Filtermap"]
         |                          |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.Filtermap"]
         |                          +- ArgumentList[]
         |                             +- VariableAccess[@TypeMirror = "java.lang.Class<capture#555 of ? extends R>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<net.sourceforge.pmd.lang.ast.Node>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<net.sourceforge.pmd.lang.ast.Node>"]
         |           +- ArgumentList[]
         |              +- MethodReference[@TypeMirror = "java.util.function.Function<T, net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends net.sourceforge.pmd.lang.ast.Node>>"]
         |                 +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |                    +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<net.sourceforge.pmd.lang.ast.Node>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<net.sourceforge.pmd.lang.ast.Node>"]
         |           +- ArgumentList[]
         |              +- MethodReference[@TypeMirror = "java.util.function.Function<T, net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends net.sourceforge.pmd.lang.ast.Node>>"]
         |                 +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |                    +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "R"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<R>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.lang.Class<? extends R>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Class<? extends R>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? extends R"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.lang.Class<? extends R>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<R>"]
         |           +- ArgumentList[]
         |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<T, net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends R>>"]
         |                 +- LambdaParameterList[]
         |                 |  +- LambdaParameter[@TypeMirror = "T"]
         |                 |     +- ModifierList[]
         |                 |     +- VariableDeclaratorId[@TypeMirror = "T"]
         |                 +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<R>"]
         |                    +- VariableAccess[@TypeMirror = "T"]
         |                    +- ArgumentList[]
         |                       +- VariableAccess[@TypeMirror = "java.lang.Class<capture#424 of ? extends R>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.NonNull"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.NonNull"]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "R"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<R>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Function<T, net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends R>>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<T, net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends R>>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends R>"]
         |  |     |        +- TypeArguments[]
         |  |     |           +- WildcardType[@TypeMirror = "? extends R"]
         |  |     |              +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<T, net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends R>>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- ConstructorCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T, R>"]
         |           +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T extends net.sourceforge.pmd.lang.ast.Node, S extends net.sourceforge.pmd.lang.ast.Node>"]
         |           |  +- TypeArguments[]
         |           +- ArgumentList[]
         |              +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T extends net.sourceforge.pmd.lang.ast.Node>"]
         |              +- VariableAccess[@TypeMirror = "java.util.function.Function<T, net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends R>>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- VoidType[@TypeMirror = "void"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Consumer<? super T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Consumer<? super T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Consumer<? super T>"]
         |  +- Block[]
         |     +- ExpressionStatement[]
         |        +- MethodCall[@TypeMirror = "void"]
         |           +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |           |  +- ArgumentList[]
         |           +- ArgumentList[]
         |              +- VariableAccess[@TypeMirror = "java.util.function.Consumer<capture#765 of ? super T>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |  |  +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  |  +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "int"]
         |  |     +- ModifierList[]
         |  |     +- PrimitiveType[@TypeMirror = "int"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "int"]
         |  +- Block[]
         |     +- IfStatement[]
         |     |  +- InfixExpression[@TypeMirror = "boolean"]
         |     |  |  +- VariableAccess[@TypeMirror = "int"]
         |     |  |  +- NumericLiteral[@TypeMirror = "int"]
         |     |  +- Block[]
         |     |     +- ReturnStatement[]
         |     |        +- MethodCall[@TypeMirror = "T"]
         |     |           +- ArgumentList[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "T"]
         |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |              |  +- ArgumentList[]
         |              +- VariableAccess[@TypeMirror = "int"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "int"]
         |  |     +- ModifierList[]
         |  |     +- PrimitiveType[@TypeMirror = "int"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "int"]
         |  +- Block[]
         |     +- ExpressionStatement[]
         |     |  +- MethodCall[@TypeMirror = "int"]
         |     |     +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.AssertionUtil"]
         |     |     |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.AssertionUtil"]
         |     |     +- ArgumentList[]
         |     |        +- StringLiteral[@TypeMirror = "java.lang.String"]
         |     |        +- VariableAccess[@TypeMirror = "int"]
         |     +- ReturnStatement[]
         |        +- ConditionalExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           +- InfixExpression[@TypeMirror = "boolean"]
         |           |  +- VariableAccess[@TypeMirror = "int"]
         |           |  +- NumericLiteral[@TypeMirror = "int"]
         |           +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T extends net.sourceforge.pmd.lang.ast.Node>"]
         |           +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |              +- ArgumentList[]
         |                 +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<T>>"]
         |                    +- LambdaParameterList[]
         |                    |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                    |     +- ModifierList[]
         |                    |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                    +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                       +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                       |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                       +- ArgumentList[]
         |                          +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |                          +- VariableAccess[@TypeMirror = "int"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "int"]
         |  |     +- ModifierList[]
         |  |     +- PrimitiveType[@TypeMirror = "int"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "int"]
         |  +- Block[]
         |     +- ExpressionStatement[]
         |     |  +- MethodCall[@TypeMirror = "int"]
         |     |     +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.AssertionUtil"]
         |     |     |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.AssertionUtil"]
         |     |     +- ArgumentList[]
         |     |        +- StringLiteral[@TypeMirror = "java.lang.String"]
         |     |        +- VariableAccess[@TypeMirror = "int"]
         |     +- ReturnStatement[]
         |        +- ConditionalExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           +- InfixExpression[@TypeMirror = "boolean"]
         |           |  +- VariableAccess[@TypeMirror = "int"]
         |           |  +- NumericLiteral[@TypeMirror = "int"]
         |           +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           |  +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream"]
         |           |  |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream"]
         |           |  +- ArgumentList[]
         |           +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |              +- ArgumentList[]
         |                 +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<T>>"]
         |                    +- LambdaParameterList[]
         |                    |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                    |     +- ModifierList[]
         |                    |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                    +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                       +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                       |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                       +- ArgumentList[]
         |                          +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |                          +- VariableAccess[@TypeMirror = "int"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           +- ArgumentList[]
         |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<T>>"]
         |                 +- LambdaParameterList[]
         |                 |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                 |     +- ModifierList[]
         |                 |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                    +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    +- ArgumentList[]
         |                       +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |                       +- VariableAccess[@TypeMirror = "java.util.function.Predicate<capture#853 of ? super T>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "R"]
         |  |  +- TypeParameter[@TypeMirror = "A"]
         |  +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.stream.Collector<? super T, A, R>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.stream.Collector<? super T, A, R>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |     |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     |     +- ClassOrInterfaceType[@TypeMirror = "A"]
         |  |     |     +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.stream.Collector<? super T, A, R>"]
         |  +- Block[]
         |     +- LocalVariableDeclaration[]
         |     |  +- ModifierList[]
         |     |  +- ClassOrInterfaceType[@TypeMirror = "A"]
         |     |  +- VariableDeclarator[@TypeMirror = "void"]
         |     |     +- VariableDeclaratorId[@TypeMirror = "A"]
         |     |     +- MethodCall[@TypeMirror = "A"]
         |     |        +- MethodCall[@TypeMirror = "java.util.function.Supplier<A>"]
         |     |        |  +- VariableAccess[@TypeMirror = "java.util.stream.Collector<capture#400 of ? super T, A, R>"]
         |     |        |  +- ArgumentList[]
         |     |        +- ArgumentList[]
         |     +- LocalVariableDeclaration[]
         |     |  +- ModifierList[]
         |     |  +- ClassOrInterfaceType[@TypeMirror = "java.util.function.BiConsumer<A, ? super T>"]
         |     |  |  +- TypeArguments[]
         |     |  |     +- ClassOrInterfaceType[@TypeMirror = "A"]
         |     |  |     +- WildcardType[@TypeMirror = "? super T"]
         |     |  |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |     |  +- VariableDeclarator[@TypeMirror = "void"]
         |     |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.BiConsumer<A, ? super T>"]
         |     |     +- MethodCall[@TypeMirror = "java.util.function.BiConsumer<A, capture#802 of ? super T>"]
         |     |        +- VariableAccess[@TypeMirror = "java.util.stream.Collector<capture#802 of ? super T, A, R>"]
         |     |        +- ArgumentList[]
         |     +- ExpressionStatement[]
         |     |  +- MethodCall[@TypeMirror = "void"]
         |     |     +- ArgumentList[]
         |     |        +- LambdaExpression[@TypeMirror = "java.util.function.Consumer<T>"]
         |     |           +- LambdaParameterList[]
         |     |           |  +- LambdaParameter[@TypeMirror = "T"]
         |     |           |     +- ModifierList[]
         |     |           |     +- VariableDeclaratorId[@TypeMirror = "T"]
         |     |           +- MethodCall[@TypeMirror = "void"]
         |     |              +- VariableAccess[@TypeMirror = "java.util.function.BiConsumer<A, capture#67 of ? super T>"]
         |     |              +- ArgumentList[]
         |     |                 +- VariableAccess[@TypeMirror = "A"]
         |     |                 +- VariableAccess[@TypeMirror = "T"]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "R"]
         |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.util.CollectionUtil"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.util.CollectionUtil"]
         |           +- ArgumentList[]
         |              +- VariableAccess[@TypeMirror = "java.util.stream.Collector<capture#83 of ? super T, A, R>"]
         |              +- VariableAccess[@TypeMirror = "A"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           +- ArgumentList[]
         |              +- MethodReference[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<T>>"]
         |                 +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Consumer<? super T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Consumer<? super T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Consumer<? super T>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           +- ArgumentList[]
         |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<T>>"]
         |                 +- LambdaParameterList[]
         |                 |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                 |     +- ModifierList[]
         |                 |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                    +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    +- ArgumentList[]
         |                       +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |                       +- VariableAccess[@TypeMirror = "java.util.function.Consumer<capture#327 of ? super T>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? extends T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends T>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           +- ArgumentList[]
         |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<T>>"]
         |                 +- LambdaParameterList[]
         |                 |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                 |     +- ModifierList[]
         |                 |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                    +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    +- ArgumentList[]
         |                       +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |                       +- MethodCall[@TypeMirror = "java.util.Iterator<capture#560 of ? extends T>"]
         |                          +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<capture#560 of ? extends T>"]
         |                          +- ArgumentList[]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? extends T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<? extends T>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           +- ArgumentList[]
         |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<T>>"]
         |                 +- LambdaParameterList[]
         |                 |  +- LambdaParameter[@TypeMirror = "java.util.Iterator<T>"]
         |                 |     +- ModifierList[]
         |                 |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                    +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |                    +- ArgumentList[]
         |                       +- MethodCall[@TypeMirror = "java.util.Iterator<capture#327 of ? extends T>"]
         |                       |  +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<capture#327 of ? extends T>"]
         |                       |  +- ArgumentList[]
         |                       +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- PrimitiveType[@TypeMirror = "boolean"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "boolean"]
         |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |              |  +- ArgumentList[]
         |              +- VariableAccess[@TypeMirror = "java.util.function.Predicate<capture#158 of ? super T>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- PrimitiveType[@TypeMirror = "boolean"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "boolean"]
         |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |              |  +- ArgumentList[]
         |              +- VariableAccess[@TypeMirror = "java.util.function.Predicate<capture#409 of ? super T>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- PrimitiveType[@TypeMirror = "boolean"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "boolean"]
         |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |              |  +- ArgumentList[]
         |              +- VariableAccess[@TypeMirror = "java.util.function.Predicate<capture#690 of ? super T>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- PrimitiveType[@TypeMirror = "int"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "int"]
         |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- ArgumentList[]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- PrimitiveType[@TypeMirror = "boolean"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "boolean"]
         |           +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |           |  +- ArgumentList[]
         |           +- ArgumentList[]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |  |  +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  |  +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- LocalVariableDeclaration[]
         |     |  +- ModifierList[]
         |     |  +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<T>"]
         |     |  |  +- TypeArguments[]
         |     |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |     |  +- VariableDeclarator[@TypeMirror = "void"]
         |     |     +- VariableDeclaratorId[@TypeMirror = "java.util.Iterator<T>"]
         |     |     +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |     |        +- ArgumentList[]
         |     +- ReturnStatement[]
         |        +- ConditionalExpression[@TypeMirror = "T"]
         |           +- MethodCall[@TypeMirror = "boolean"]
         |           |  +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |           |  +- ArgumentList[]
         |           +- MethodCall[@TypeMirror = "T"]
         |           |  +- VariableAccess[@TypeMirror = "java.util.Iterator<T>"]
         |           |  +- ArgumentList[]
         |           +- NullLiteral[@TypeMirror = "null"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |  |  +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  |  +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "T"]
         |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- ArgumentList[]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "java.util.List<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "java.util.List<T>"]
         |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
         |                 +- ArgumentList[]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "R"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |  +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.lang.Class<? extends R>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Class<? extends R>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? extends R"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.lang.Class<? extends R>"]
         |  +- Block[]
         |     +- ForeachStatement[]
         |     |  +- LocalVariableDeclaration[]
         |     |  |  +- ModifierList[]
         |     |  |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |     |  |  +- VariableDeclarator[@TypeMirror = "void"]
         |     |  |     +- VariableDeclaratorId[@TypeMirror = "T"]
         |     |  +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T extends net.sourceforge.pmd.lang.ast.Node>"]
         |     |  +- Block[]
         |     |     +- IfStatement[]
         |     |        +- MethodCall[@TypeMirror = "boolean"]
         |     |        |  +- VariableAccess[@TypeMirror = "java.lang.Class<capture#643 of ? extends R>"]
         |     |        |  +- ArgumentList[]
         |     |        |     +- VariableAccess[@TypeMirror = "T"]
         |     |        +- Block[]
         |     |           +- ReturnStatement[]
         |     |              +- MethodCall[@TypeMirror = "capture#159 of ? extends R"]
         |     |                 +- VariableAccess[@TypeMirror = "java.lang.Class<capture#159 of ? extends R>"]
         |     |                 +- ArgumentList[]
         |     |                    +- VariableAccess[@TypeMirror = "T"]
         |     +- ReturnStatement[]
         |        +- NullLiteral[@TypeMirror = "null"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |  |  +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  |  +- Annotation[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "org.checkerframework.checker.nullness.qual.Nullable"]
         |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- WildcardType[@TypeMirror = "? super T"]
         |  |     |        +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Predicate<? super T>"]
         |  +- Block[]
         |     +- ForeachStatement[]
         |     |  +- LocalVariableDeclaration[]
         |     |  |  +- ModifierList[]
         |     |  |  +- ClassOrInterfaceType[@TypeMirror = "T"]
         |     |  |  +- VariableDeclarator[@TypeMirror = "void"]
         |     |  |     +- VariableDeclaratorId[@TypeMirror = "T"]
         |     |  +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T extends net.sourceforge.pmd.lang.ast.Node>"]
         |     |  +- Block[]
         |     |     +- IfStatement[]
         |     |        +- MethodCall[@TypeMirror = "boolean"]
         |     |        |  +- VariableAccess[@TypeMirror = "java.util.function.Predicate<capture#897 of ? super T>"]
         |     |        |  +- ArgumentList[]
         |     |        |     +- VariableAccess[@TypeMirror = "T"]
         |     |        +- Block[]
         |     |           +- ReturnStatement[]
         |     |              +- VariableAccess[@TypeMirror = "T"]
         |     +- ReturnStatement[]
         |        +- NullLiteral[@TypeMirror = "null"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<T>"]
         |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.StreamImpl"]
         |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.StreamImpl"]
         |           +- ArgumentList[]
         |              +- MethodCall[@TypeMirror = "java.util.List<T>"]
         |                 +- ArgumentList[]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "R"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream<R>"]
         |  |  +- TypeArguments[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  +- FormalParameters[]
         |  |  +- FormalParameter[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<R>>"]
         |  |     +- ModifierList[]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<R>>"]
         |  |     |  +- TypeArguments[]
         |  |     |     +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<T>"]
         |  |     |     |  +- TypeArguments[]
         |  |     |     |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |  |     |     +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<R>"]
         |  |     |        +- TypeArguments[]
         |  |     |           +- ClassOrInterfaceType[@TypeMirror = "R"]
         |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<R>>"]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- ConstructorCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T extends net.sourceforge.pmd.lang.ast.Node>#IteratorMapping<R extends net.sourceforge.pmd.lang.ast.Node>"]
         |           +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T extends net.sourceforge.pmd.lang.ast.Node>#IteratorMapping<S extends net.sourceforge.pmd.lang.ast.Node>"]
         |           |  +- TypeArguments[]
         |           +- ArgumentList[]
         |              +- VariableAccess[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<R>>"]
         +- MethodDeclaration[]
         |  +- ModifierList[]
         |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |  +- ClassOrInterfaceType[@TypeMirror = "java.lang.String"]
         |  +- FormalParameters[]
         |  +- Block[]
         |     +- ReturnStatement[]
         |        +- InfixExpression[@TypeMirror = "java.lang.String"]
         |           +- InfixExpression[@TypeMirror = "java.lang.String"]
         |           |  +- InfixExpression[@TypeMirror = "java.lang.String"]
         |           |  |  +- MethodCall[@TypeMirror = "java.lang.String"]
         |           |  |  |  +- MethodCall[@TypeMirror = "java.lang.Class<? extends net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream>"]
         |           |  |  |  |  +- ArgumentList[]
         |           |  |  |  +- ArgumentList[]
         |           |  |  +- StringLiteral[@TypeMirror = "java.lang.String"]
         |           |  +- MethodCall[@TypeMirror = "java.lang.String"]
         |           |     +- MethodCall[@TypeMirror = "java.util.stream.Stream<java.lang.String>"]
         |           |     |  +- MethodCall[@TypeMirror = "java.util.stream.Stream<T>"]
         |           |     |  |  +- ArgumentList[]
         |           |     |  +- ArgumentList[]
         |           |     |     +- MethodReference[@TypeMirror = "java.util.function.Function<T, java.lang.String>"]
         |           |     |        +- TypeExpression[@TypeMirror = "java.util.Objects"]
         |           |     |           +- ClassOrInterfaceType[@TypeMirror = "java.util.Objects"]
         |           |     +- ArgumentList[]
         |           |        +- MethodCall[@TypeMirror = "java.util.stream.Collector<java.lang.CharSequence, ?, java.lang.String>"]
         |           |           +- TypeExpression[@TypeMirror = "java.util.stream.Collectors"]
         |           |           |  +- ClassOrInterfaceType[@TypeMirror = "java.util.stream.Collectors"]
         |           |           +- ArgumentList[]
         |           |              +- StringLiteral[@TypeMirror = "java.lang.String"]
         |           +- StringLiteral[@TypeMirror = "java.lang.String"]
         +- ClassOrInterfaceDeclaration[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T extends net.sourceforge.pmd.lang.ast.Node>#IteratorMapping<S extends net.sourceforge.pmd.lang.ast.Node>"]
         |  +- ModifierList[]
         |  +- TypeParameters[]
         |  |  +- TypeParameter[@TypeMirror = "S"]
         |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
         |  +- ExtendsList[]
         |  |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<S>"]
         |  |     +- TypeArguments[]
         |  |        +- ClassOrInterfaceType[@TypeMirror = "S"]
         |  +- ClassOrInterfaceBody[]
         |     +- FieldDeclaration[]
         |     |  +- ModifierList[]
         |     |  +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<S>>"]
         |     |  |  +- TypeArguments[]
         |     |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<T>"]
         |     |  |     |  +- TypeArguments[]
         |     |  |     |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |     |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<S>"]
         |     |  |        +- TypeArguments[]
         |     |  |           +- ClassOrInterfaceType[@TypeMirror = "S"]
         |     |  +- VariableDeclarator[@TypeMirror = "void"]
         |     |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<S>>"]
         |     +- ConstructorDeclaration[]
         |     |  +- ModifierList[]
         |     |  +- FormalParameters[]
         |     |  |  +- FormalParameter[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<S>>"]
         |     |  |     +- ModifierList[]
         |     |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<S>>"]
         |     |  |     |  +- TypeArguments[]
         |     |  |     |     +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<T>"]
         |     |  |     |     |  +- TypeArguments[]
         |     |  |     |     |     +- ClassOrInterfaceType[@TypeMirror = "T"]
         |     |  |     |     +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<S>"]
         |     |  |     |        +- TypeArguments[]
         |     |  |     |           +- ClassOrInterfaceType[@TypeMirror = "S"]
         |     |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<S>>"]
         |     |  +- Block[]
         |     |     +- ExpressionStatement[]
         |     |        +- AssignmentExpression[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<S>>"]
         |     |           +- FieldAccess[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<S>>"]
         |     |           |  +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T extends net.sourceforge.pmd.lang.ast.Node>#IteratorMapping<S extends net.sourceforge.pmd.lang.ast.Node>"]
         |     |           +- VariableAccess[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<S>>"]
         |     +- MethodDeclaration[]
         |        +- ModifierList[]
         |        |  +- Annotation[@TypeMirror = "java.lang.Override"]
         |        |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
         |        +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<S>"]
         |        |  +- TypeArguments[]
         |        |     +- ClassOrInterfaceType[@TypeMirror = "S"]
         |        +- FormalParameters[]
         |        +- Block[]
         |           +- ReturnStatement[]
         |              +- MethodCall[@TypeMirror = "java.util.Iterator<S>"]
         |                 +- VariableAccess[@TypeMirror = "java.util.function.Function<java.util.Iterator<T>, java.util.Iterator<S>>"]
         |                 +- ArgumentList[]
         |                    +- MethodCall[@TypeMirror = "java.util.Iterator"]
         |                       +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream"]
         |                       |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream"]
         |                       +- ArgumentList[]
         +- ClassOrInterfaceDeclaration[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T extends net.sourceforge.pmd.lang.ast.Node, S extends net.sourceforge.pmd.lang.ast.Node>"]
            +- ModifierList[]
            +- TypeParameters[]
            |  +- TypeParameter[@TypeMirror = "T"]
            |  |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
            |  +- TypeParameter[@TypeMirror = "S"]
            |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.Node"]
            +- ExtendsList[]
            |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<S>"]
            |     +- TypeArguments[]
            |        +- ClassOrInterfaceType[@TypeMirror = "S"]
            +- ImplementsList[]
            |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<S>"]
            |     +- TypeArguments[]
            |        +- ClassOrInterfaceType[@TypeMirror = "S"]
            +- ClassOrInterfaceBody[]
               +- FieldDeclaration[]
               |  +- ModifierList[]
               |  +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |  |  +- TypeArguments[]
               |  |     +- WildcardType[@TypeMirror = "? super T"]
               |  |     |  +- ClassOrInterfaceType[@TypeMirror = "T"]
               |  |     +- WildcardType[@TypeMirror = "? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>"]
               |  |        +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>"]
               |  |           +- TypeArguments[]
               |  |              +- WildcardType[@TypeMirror = "? extends S"]
               |  |                 +- ClassOrInterfaceType[@TypeMirror = "S"]
               |  +- VariableDeclarator[@TypeMirror = "void"]
               |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               +- FieldDeclaration[]
               |  +- ModifierList[]
               |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |  +- VariableDeclarator[@TypeMirror = "void"]
               |     +- VariableDeclaratorId[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               +- FieldDeclaration[]
               |  +- ModifierList[]
               |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |  |  +- TypeArguments[]
               |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
               |  +- VariableDeclarator[@TypeMirror = "void"]
               |     +- VariableDeclaratorId[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               +- ConstructorDeclaration[]
               |  +- ModifierList[]
               |  +- FormalParameters[]
               |  |  +- FormalParameter[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |  |  |  +- ModifierList[]
               |  |  |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |  |  |  |  +- TypeArguments[]
               |  |  |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
               |  |  |  +- VariableDeclaratorId[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |  |  +- FormalParameter[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |  |  |  +- ModifierList[]
               |  |  |  +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |  |  |  |  +- TypeArguments[]
               |  |  |  |     +- WildcardType[@TypeMirror = "? super T"]
               |  |  |  |     |  +- ClassOrInterfaceType[@TypeMirror = "T"]
               |  |  |  |     +- WildcardType[@TypeMirror = "? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>"]
               |  |  |  |        +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>"]
               |  |  |  |           +- TypeArguments[]
               |  |  |  |              +- WildcardType[@TypeMirror = "? extends S"]
               |  |  |  |                 +- ClassOrInterfaceType[@TypeMirror = "S"]
               |  |  |  +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |  |  +- FormalParameter[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |  |     +- ModifierList[]
               |  |     +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |  |     +- VariableDeclaratorId[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |  +- Block[]
               |     +- ExpressionStatement[]
               |     |  +- AssignmentExpression[@TypeMirror = "java.util.function.Function<capture#356 of ? super T, capture#720 of ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |     |     +- FieldAccess[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |     |     |  +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T extends net.sourceforge.pmd.lang.ast.Node, S extends net.sourceforge.pmd.lang.ast.Node>"]
               |     |     +- VariableAccess[@TypeMirror = "java.util.function.Function<capture#579 of ? super T, capture#942 of ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |     +- ExpressionStatement[]
               |     |  +- AssignmentExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |     |     +- FieldAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |     |     |  +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T extends net.sourceforge.pmd.lang.ast.Node, S extends net.sourceforge.pmd.lang.ast.Node>"]
               |     |     +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |     +- ExpressionStatement[]
               |        +- AssignmentExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |           +- FieldAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |           |  +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T extends net.sourceforge.pmd.lang.ast.Node, S extends net.sourceforge.pmd.lang.ast.Node>"]
               |           +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               +- ConstructorDeclaration[]
               |  +- ModifierList[]
               |  +- FormalParameters[]
               |  |  +- FormalParameter[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |  |  |  +- ModifierList[]
               |  |  |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |  |  |  |  +- TypeArguments[]
               |  |  |  |     +- ClassOrInterfaceType[@TypeMirror = "T"]
               |  |  |  +- VariableDeclaratorId[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |  |  +- FormalParameter[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |  |     +- ModifierList[]
               |  |     +- ClassOrInterfaceType[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |  |     |  +- TypeArguments[]
               |  |     |     +- WildcardType[@TypeMirror = "? super T"]
               |  |     |     |  +- ClassOrInterfaceType[@TypeMirror = "T"]
               |  |     |     +- WildcardType[@TypeMirror = "? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>"]
               |  |     |        +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>"]
               |  |     |           +- TypeArguments[]
               |  |     |              +- WildcardType[@TypeMirror = "? extends S"]
               |  |     |                 +- ClassOrInterfaceType[@TypeMirror = "S"]
               |  |     +- VariableDeclaratorId[@TypeMirror = "java.util.function.Function<? super T, ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |  +- Block[]
               |     +- ExplicitConstructorInvocation[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T extends net.sourceforge.pmd.lang.ast.Node, S extends net.sourceforge.pmd.lang.ast.Node>"]
               |        +- ArgumentList[]
               |           +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |           +- VariableAccess[@TypeMirror = "java.util.function.Function<capture#295 of ? super T, capture#349 of ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |           +- FieldAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |              +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |                 +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               +- MethodDeclaration[]
               |  +- ModifierList[]
               |  |  +- Annotation[@TypeMirror = "java.lang.Override"]
               |  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
               |  +- ClassOrInterfaceType[@TypeMirror = "java.util.Iterator<S>"]
               |  |  +- TypeArguments[]
               |  |     +- ClassOrInterfaceType[@TypeMirror = "S"]
               |  +- FormalParameters[]
               |  +- Block[]
               |     +- ReturnStatement[]
               |        +- MethodCall[@TypeMirror = "java.util.Iterator<S>"]
               |           +- TypeExpression[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
               |           |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.internal.util.IteratorUtil"]
               |           +- ArgumentList[]
               |              +- MethodCall[@TypeMirror = "java.util.Iterator<T>"]
               |              |  +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
               |              |  +- ArgumentList[]
               |              +- LambdaExpression[@TypeMirror = "java.util.function.Function<T, java.util.Iterator<? extends S>>"]
               |                 +- LambdaParameterList[]
               |                 |  +- LambdaParameter[@TypeMirror = "T"]
               |                 |     +- ModifierList[]
               |                 |     +- VariableDeclaratorId[@TypeMirror = "T"]
               |                 +- Block[]
               |                    +- LocalVariableDeclaration[]
               |                    |  +- ModifierList[]
               |                    |  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>"]
               |                    |  |  +- TypeArguments[]
               |                    |  |     +- WildcardType[@TypeMirror = "? extends S"]
               |                    |  |        +- ClassOrInterfaceType[@TypeMirror = "S"]
               |                    |  +- VariableDeclarator[@TypeMirror = "void"]
               |                    |     +- VariableDeclaratorId[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>"]
               |                    |     +- MethodCall[@TypeMirror = "capture#161 of ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>"]
               |                    |        +- VariableAccess[@TypeMirror = "java.util.function.Function<capture#186 of ? super T, capture#161 of ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
               |                    |        +- ArgumentList[]
               |                    |           +- VariableAccess[@TypeMirror = "T"]
               |                    +- ReturnStatement[]
               |                       +- MethodCall[@TypeMirror = "java.util.Iterator<capture#814 of ? extends S>"]
               |                          +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<capture#814 of ? extends S>"]
               |                          |  +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
               |                          |  +- ArgumentList[]
               |                          |     +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<capture#814 of ? extends S>"]
               |                          +- ArgumentList[]
               +- MethodDeclaration[]
                  +- ModifierList[]
                  |  +- Annotation[@TypeMirror = "java.lang.Override"]
                  |     +- ClassOrInterfaceType[@TypeMirror = "java.lang.Override"]
                  +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<S>"]
                  |  +- TypeArguments[]
                  |     +- ClassOrInterfaceType[@TypeMirror = "S"]
                  +- FormalParameters[]
                  |  +- FormalParameter[@TypeMirror = "boolean"]
                  |     +- ModifierList[]
                  |     +- PrimitiveType[@TypeMirror = "boolean"]
                  |     +- VariableDeclaratorId[@TypeMirror = "boolean"]
                  +- Block[]
                     +- ReturnStatement[]
                        +- ConditionalExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<S>"]
                           +- InfixExpression[@TypeMirror = "boolean"]
                           |  +- MethodCall[@TypeMirror = "boolean"]
                           |  |  +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
                           |  |  +- ArgumentList[]
                           |  +- VariableAccess[@TypeMirror = "boolean"]
                           +- ThisExpression[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T extends net.sourceforge.pmd.lang.ast.Node, S extends net.sourceforge.pmd.lang.ast.Node>"]
                           +- ConstructorCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T, S>"]
                              +- ClassOrInterfaceType[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream$DescendantMapping<T extends net.sourceforge.pmd.lang.ast.Node, S extends net.sourceforge.pmd.lang.ast.Node>"]
                              |  +- TypeArguments[]
                              +- ArgumentList[]
                                 +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.IteratorBasedNStream<T>"]
                                 +- VariableAccess[@TypeMirror = "java.util.function.Function<capture#75 of ? super T, capture#837 of ? extends net.sourceforge.pmd.lang.ast.NodeStream$DescendantNodeStream<? extends S>>"]
                                 +- MethodCall[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
                                    +- VariableAccess[@TypeMirror = "net.sourceforge.pmd.lang.ast.internal.TreeWalker"]
                                    +- ArgumentList[]
                                       +- VariableAccess[@TypeMirror = "boolean"]
