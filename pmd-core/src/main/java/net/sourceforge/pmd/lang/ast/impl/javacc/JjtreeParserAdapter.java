/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */

package net.sourceforge.pmd.lang.ast.impl.javacc;

import java.io.Reader;

import net.sourceforge.pmd.lang.Parser;
import net.sourceforge.pmd.lang.ParserOptions;
import net.sourceforge.pmd.lang.TokenManager;
import net.sourceforge.pmd.lang.ast.CharStream;
import net.sourceforge.pmd.lang.ast.ParseException;
import net.sourceforge.pmd.lang.ast.RootNode;
import net.sourceforge.pmd.lang.ast.TokenMgrError;

/**
 * Base implementation of the {@link Parser} interface for JavaCC language
 * implementations. This wraps a parser generated by JavaCC, it's not meant
 * as a base class for the generated parser.
 *
 * @param <R> Type of the root node of this language
 */
public abstract class JjtreeParserAdapter<R extends RootNode> implements Parser {

    protected final ParserOptions parserOptions;

    protected JjtreeParserAdapter(ParserOptions parserOptions) {
        this.parserOptions = parserOptions;
    }

    @Override
    public ParserOptions getParserOptions() {
        return parserOptions;
    }

    @Override
    public TokenManager getTokenManager(String fileName, Reader source) {
        TokenManager tokenManager = createTokenManager(source);
        tokenManager.setFileName(fileName);
        return tokenManager;
    }

    protected abstract TokenManager createTokenManager(Reader source);


    protected abstract JavaccTokenDocument newDocument(String fullText);

    protected CharStream newCharStream(JavaccTokenDocument tokenDocument) {
        return new SimpleCharStream(tokenDocument);
    }

    @Override
    public R parse(String fileName, Reader source) throws ParseException {
        String text = CharStreamFactory.toString(source);
        JavaccTokenDocument doc = newDocument(text);
        CharStream charStream = newCharStream(doc);

        try {
            return parseImpl(charStream, getParserOptions());
        } catch (TokenMgrError tme) {
            throw tme.withFileName(fileName);
        }
    }

    protected abstract R parseImpl(CharStream cs, ParserOptions options) throws ParseException;


    @Override
    public String toString() {
        return getClass().getSimpleName();
    }
}
