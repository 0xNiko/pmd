<project name="pmd" default="alljavacc" basedir="../../">

    <property name="javacc-home.path" value="target/lib" />

    <property name="tmp-package" value="net.sourceforge.pmd.lang.ast.dummy" />

    <property name="tmp-package.dir" value="${target}/net/sourceforge/pmd/lang/ast/dummy" />

    <property name="base-ast-package" value="net.sourceforge.pmd.lang.ast" />
    <property name="base-ast-package.dir" value="${target}/net/sourceforge/pmd/lang/ast" />

    <property name="target-package" value="${base-ast-package}" />
    <property name="target-package.dir" value="${base-ast-package.dir}" />


    <target name="alljavacc"
            description="Generates all JavaCC aspects within PMD"
            depends="checkUpToDate,init,dummyjjtree,cleanup" />

    <target name="checkUpToDate">
        <uptodate property="javaccBuildNotRequired" targetfile="${target}/last-generated-timestamp">
            <srcfiles dir="etc/grammar" includes="*.jj*"/>
        </uptodate>
        <echo message="up to date check: javaccBuildNotRequired=${javaccBuildNotRequired}"/>
    </target>

    <target name="init" unless="javaccBuildNotRequired">
        <mkdir dir="${javacc-home.path}" />
        <copy file="${javacc.jar}" tofile="${javacc-home.path}/javacc.jar" />

        <mkdir dir="${target}"/>
        <touch file="${target}/last-generated-timestamp"/>
    </target>

    <target name="cleanup">
        <delete dir="${javacc-home.path}" />
    </target>

    <target name="dummyjjtree" description="Generates the reusable JavaCC aspects" unless="javaccBuildNotRequired">

        <delete dir="${tmp-package.dir}" />
        <mkdir dir="${tmp-package.dir}" />
        <echo>Using JavaCC home: ${javacc-home.path}</echo>
        <jjtree target="etc/grammar/dummy.jjt"
                outputdirectory="${tmp-package.dir}"
                javacchome="${javacc-home.path}" />

        <!-- Generate CharStream interface -->
        <javacc usercharstream="true"
                target="${tmp-package.dir}/dummy.jj"
                outputdirectory="${tmp-package.dir}"
                javacchome="${javacc-home.path}" />

        <!-- Generate ASCII w/ Unicode Escapes CharStream implementation -->
        <javacc usercharstream="false"
                unicodeinput="false"
                javaunicodeescape="true"
                static="false"
                target="${tmp-package.dir}/dummy.jj"
                outputdirectory="${tmp-package.dir}"
                javacchome="${javacc-home.path}" />

        <replace file="${tmp-package.dir}/JavaCharStream.java"
                 token="${tmp-package}"
                 value="${target-package}">
            <fileset dir="${tmp-package.dir}">
            </fileset>
        </replace>


        <!-- Patch JavaCharStream        -->

        <replace file="${tmp-package.dir}/JavaCharStream.java"
                 token="JavaCharStream"
                 value="JavaCharStreamBase"/>
        <replace file="${tmp-package.dir}/JavaCharStream.java"
                 token="class JavaCharStreamBase"
                 value="abstract class JavaCharStreamBase implements ${target-package}.CharStream" />
        <replace file="${tmp-package.dir}/JavaCharStream.java"
                 token="char c;"
                 value="char c; beforeReadChar();" />
         <replace file="${tmp-package.dir}/JavaCharStream.java"
                 token="/** Read a character. */"
                 value="protected void beforeReadChar() { }" />

       <move overwrite="true"
              file="${tmp-package.dir}/JavaCharStream.java"
              tofile="${target-package.dir}/JavaCharStreamBase.java" />

        <!-- Generate ASCII w/o Unicode Escapes CharStream implementation -->
        <javacc usercharstream="false"
                unicodeinput="false"
                javaunicodeescape="false"
                static="false"
                target="${tmp-package.dir}/dummy.jj"
                outputdirectory="${tmp-package.dir}"
                javacchome="${javacc-home.path}" />

        <replace file="${tmp-package.dir}/SimpleCharStream.java"
                 token="public class SimpleCharStream"
                 value="public class SimpleCharStream implements CharStream" />

        <replace file="${tmp-package.dir}/TokenMgrError.java"
                 token="${target-package}"
                 value="${base-ast-package}" />

        <replace file="${tmp-package.dir}/TokenMgrError.java"
                 token="extends Error"
                 value="extends RuntimeException" />

        <replace file="${tmp-package.dir}/TokenMgrError.java"
                 token="static final int"
                 value="public static final int" />

        <replace file="${tmp-package.dir}/TokenMgrError.java">
            <replacetoken><![CDATA["Lexical error at line "]]></replacetoken>
            <replacevalue>&quot;Lexical error in file &quot; + net.sourceforge.pmd.lang.ast.AbstractTokenManager.getFileName() + &quot; at line &quot;</replacevalue>
        </replace>

        <move overwrite="true"
              file="${tmp-package.dir}/TokenMgrError.java"
              tofile="${base-ast-package.dir}/TokenMgrError.java" />

        <move overwrite="true"
              todir="${target-package.dir}">
            <fileset dir="${tmp-package.dir}">
                <include name="SimpleCharStream.java" />
                <include name="CharStream.java" />
            </fileset>
        </move>

        <delete dir="${tmp-package.dir}" />

    </target>

</project>
